@startuml SourceProcessorSystemSequence

!include style.puml
box
participant ":StaticProgramAnalyzer" as StaticProgramAnalyzer LOGIC_COLOR
participant ":SourceManager" as SourceManager LOGIC_COLOR
participant ":SourceTokenizer" as SourceTokenizer LOGIC_COLOR
participant ":SourceParser" as SourceParser LOGIC_COLOR
participant ":DesignExtractor" as DesignExtractor LOGIC_COLOR
participant ":EntityExtractor" as EntityExtractor LOGIC_COLOR
participant ":Store" as Store LOGIC_COLOR
participant ":EntityStore" as EntityStore LOGIC_COLOR
participant "PKB" as PKB LOGIC_COLOR
end box

activate StaticProgramAnalyzer

StaticProgramAnalyzer -> PKB: getWriteStorage()
activate PKB
PKB --> StaticProgramAnalyzer: WriteStorage writeStorage
deactivate PKB

StaticProgramAnalyzer -> PKB: getReadStorage()
activate PKB
PKB --> StaticProgramAnalyzer: ReadStorage readStorage
deactivate PKB

create Store
StaticProgramAnalyzer -> Store: Store(WriteStorage: writeStorage, ReadStorage: readStorage)
activate Store

create EntityStore
Store -> EntityStore: EntityStore(WriteStorage: writeStorage)
activate EntityStore

EntityStore --> Store: 
deactivate EntityStore


Store --> StaticProgramAnalyzer: IStore Store
deactivate Store

StaticProgramAnalyzer -> SourceManager: process(string: file_name, IStore: store)
activate SourceManager

create SourceTokenizer
SourceManager -> SourceTokenizer: SourceTokenizer(ifstream: input)
activate SourceTokenizer

SourceTokenizer --> SourceManager: SourceTokenizer
deactivate SourceTokenizer

SourceManager -> SourceTokenizer: tokenize()
activate SourceTokenizer

SourceTokenizer --> SourceManager: list<Tokens>
deactivate SourceTokenizer

create SourceParser
SourceManager -> SourceParser: SourceParser(list<Tokens>)
activate SourceParser

SourceParser --> SourceManager: SourceParser
deactivate SourceParser

SourceManager -> SourceParser: parse()
activate SourceParser

SourceParser --> SourceManager
deactivate SourceParser

SourceManager -> SourceParser: getProgramNode()
activate SourceParser

SourceParser --> SourceManager: ProgramNode programNode
deactivate SourceParser

create DesignExtractor
SourceManager -> DesignExtractor: DesignExtractor(IStore: store)
activate DesignExtractor

DesignExtractor -> Store: getEntityStore()
activate Store

Store --> DesignExtractor: EntityStore entityStore
deactivate Store

create EntityExtractor
DesignExtractor -> EntityExtractor: EntityExtractor(EntityStore: entityStore)
activate EntityExtractor

EntityExtractor --> DesignExtractor: EntityExtractor
deactivate EntityExtractor

DesignExtractor --> SourceManager: DesignExtractor
deactivate DesignExtractor

SourceManager -> DesignExtractor: extract(ProgramNode: programNode)
activate DesignExtractor

DesignExtractor -> EntityExtractor: extractProgram(ProgramNode: programNode)
activate EntityExtractor

loop For each entity
    EntityExtractor -> EntityStore: insertEntity(Node: node)
    activate EntityStore
    EntityStore -> PKB: insertEntity(int: stmt_no)
    activate PKB
    PKB --> EntityStore: 
    deactivate
    EntityStore --> EntityExtractor: 
    deactivate EntityStore
end

EntityExtractor --> DesignExtractor:
deactivate EntityExtractor

DesignExtractor --> SourceManager:
deactivate DesignExtractor

SourceManager --> StaticProgramAnalyzer:
deactivate SourceManager

@enduml